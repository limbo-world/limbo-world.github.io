<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Limbo</title>
  
  
  <link href="https://limbo-world.github.io/atom.xml" rel="self"/>
  
  <link href="https://limbo-world.github.io/"/>
  <updated>2022-02-18T07:05:54.089Z</updated>
  <id>https://limbo-world.github.io/</id>
  
  <author>
    <name>Limbo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次WebFlux应用内存泄漏排查</title>
    <link href="https://limbo-world.github.io/2022/02/17/%E8%AE%B0%E4%B8%80%E6%AC%A1WebFlux%E5%BA%94%E7%94%A8%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/"/>
    <id>https://limbo-world.github.io/2022/02/17/%E8%AE%B0%E4%B8%80%E6%AC%A1WebFlux%E5%BA%94%E7%94%A8%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/</id>
    <published>2022-02-17T12:15:15.000Z</published>
    <updated>2022-02-18T07:05:54.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司项目存在一个服务，类似于爬虫，需要解析给定的URL，从返回的HTML中提取页面的标题、封面图、摘要、icon等信息。由于这是一个无DB访问的纯内存服务，且下游服务（需解析的URL地址）并非内部服务，无需考虑并发压力，在服务搭建时选用<code>WebFlux</code>作为web层框架，选用spring的<code>WebClient</code>作为请求下游服务的HTTP客户端。</p><p>服务部署于k8s容器内，JDK版本为OpenJDK11，Pod配置4C4G，Java服务配置最大堆内存2G。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>服务上线后请求压力不大，但长时间运行后，服务堆内存占用达到99%，日志监控出现大量OOM报错，继而容器Pod重启。重启后可正常工作一段时间，之后再次堆内存占用99%，出现OOM报错。</p><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><h2 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h2><p>通过容器监控，查看Pod重启前一段时间的机器内存占用图，发现图呈现持续上升趋势，且到达堆内存分配上限后，Pod发生重启。初步推测是发生了内存泄漏。</p><img src="/2022/02/17/%E8%AE%B0%E4%B8%80%E6%AC%A1WebFlux%E5%BA%94%E7%94%A8%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/pod_memory_used.png" class=""><p>使用<code>jmap -histo:live 1</code>查看存活对象分布，发现byte数组占用内存较多，且<code>PoolSubpage</code>对象数量也较多，怀疑是netty发生了内存泄漏。</p><img src="/2022/02/17/%E8%AE%B0%E4%B8%80%E6%AC%A1WebFlux%E5%BA%94%E7%94%A8%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/jmap_histo_live.png" class=""><p>排查ELK中的ERROR日志，除OOM报错外，另发现少量netty的报错信息，异常堆栈如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.Recent access records: Created at:    io.netty.buffer.PooledByteBufAllocator.newHeapBuffer(PooledByteBufAllocator.java:332)    io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:168)    io.netty.buffer.AbstractByteBufAllocator.heapBuffer(AbstractByteBufAllocator.java:159)    io.netty.handler.codec.compression.JdkZlibDecoder.decode(JdkZlibDecoder.java:180)    io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:493)    io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:432)    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从异常提示信息可见，netty的堆内存<code>ByteBuf</code>在未被释放的情况下被GC回收，而netty使用内存池进行堆内存管理，如<code>ByteBuff</code>未经过<code>release()</code>方法调用即被GC回收，将导致内存池中大量内存块的引用计数无法归零，导致内存无法回收。且<code>ByteBuf</code>被GC回收后，应用程序已经无法再调用<code>release()</code>方法，即导致了内存泄漏。</p><h2 id="定位问题出现位置"><a href="#定位问题出现位置" class="headerlink" title="定位问题出现位置"></a>定位问题出现位置</h2><p>项目中使用netty的地方有：<code>Redisson</code>、<code>WebFlux</code>、<code>WebClient</code>。考虑到第三方库很成熟，经过很多商业项目应用，问题不太可能出现在库代码中，可能是自己的使用方式有误。应用程序中自己编码使用的主要是<code>WebClient</code>，用于请求第三方页面HTML。</p><p>业务使用场景中，需要读取 ResponseHeader 和 ResponseBody 两部分内容。Header 用于从 Content-Type 中解析编码；Body 用于直接读取二进制数据，确定页面真正的编码格式。</p><blockquote><p>之所以需要确定页面真正编码格式，是因为有些第三方页面，response header中通过 Content-Type 声明编码格式为 UTF-8，但真正的编码格式却是 GBK 或 GB2312，导致解析中文摘要时乱码。因此需要读取二进制流后，根据流内容判断真实编码格式。写过爬虫的兄弟应该理解。</p></blockquote><p><code>WebClient</code>提供了如下多个获取 Response 的方法：</p><ol><li><p>WebClient.RequestHeadersSpec#retrieve<br>可以将 body 直接处理为指定类型的对象，但是无法直接操作 response；</p></li><li><p>WebClient.RequestHeadersSpec#exchange<br>可以直接操作 response，但 body 的读取操作需要自行处理；</p></li></ol><p>为满足需求，项目中使用了<code>WebClient.RequestHeadersSpec#exchange</code>方法，这也是项目中唯一一处可以直接操作 ByteBuf 数据的地方。在使用此方法时，仅进行了数据读取操作，并没有释放 body。而在方法的注释上，刚好有这么一段：</p><img src="/2022/02/17/%E8%AE%B0%E4%B8%80%E6%AC%A1WebFlux%E5%BA%94%E7%94%A8%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/webclient_requestheadersspec_exchange.png" class=""><p>NOTE 部分翻译过来的大致意思是：</p><blockquote><p>与 retrieve() 不同，在使用 exchange() 时，不论在任何情况下（成功、异常、无法处理的数据等），应用程序都应当消费掉响应内容。不这样做可能会导致内存泄漏。请参阅 ClientResponse 以获取可用于消费 body 的方式。通常应该使用 retrieve()，除非您有充分的理由使用exchange()，它允许您检查响应状态和标题，并在之后用于决定是否消费body、如何消费body。</p></blockquote><p>而刚好在一些业务校验失败的情况下，如 Content-Type 中标识返回的数据不是 HTML 内容时，应用代码直接进行了 return，而没有消费 body，导致了内存泄漏。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 请求代码示例</span><span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>USER_AGENT<span class="token punctuation">,</span> CHROME_AGENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>HOST<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">cookies</span><span class="token punctuation">(</span>cookies <span class="token operator">-></span> ctx<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cookies<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>response <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 再次检测是否超时</span>        <span class="token comment">// 注意，这里直接返回了Mono.error，而没有释放response</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">isParseTimeout</span><span class="token punctuation">(</span>PARSE_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ReadTimeoutException</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 先解析重定向，不存在重定向则解析body</span>        <span class="token keyword">return</span> <span class="token function">judgeRedirect</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>redirectTo <span class="token operator">-></span> <span class="token function">followRedirect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> redirectTo<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LinkParseResult</span><span class="token operator">::</span><span class="token function">detectParseFail</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>已经定位到问题发生的原因，且官方文档已给出了解决办法<code>参阅 ClientResponse 以获取可用于消费 body 的方式</code>。在<code>ClientResponse</code>接口的注释上，列出来所有用于消费 Response 的方法：</p><img src="/2022/02/17/%E8%AE%B0%E4%B8%80%E6%AC%A1WebFlux%E5%BA%94%E7%94%A8%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5/clientresponse.png" class=""><p>具体每个方法的作用就不赘述，根据业务场景，应当在不需要消费 body 时调用 <code>releaseBody()</code> 方法进行释放。修改后的代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 请求代码示例</span><span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>USER_AGENT<span class="token punctuation">,</span> CHROME_AGENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span>HOST<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">cookies</span><span class="token punctuation">(</span>cookies <span class="token operator">-></span> ctx<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cookies<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>response <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 再次检测是否超时，并释放response</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">isParseTimeout</span><span class="token punctuation">(</span>PARSE_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">releaseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ReadTimeoutException</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 先解析重定向，不存在重定向则解析body</span>        <span class="token keyword">return</span> <span class="token function">judgeRedirect</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>redirectTo <span class="token operator">-></span> <span class="token function">followRedirect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> redirectTo<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LinkParseResult</span><span class="token operator">::</span><span class="token function">detectParseFail</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在使用响应式HTTP客户端<code>WebClient</code>时，接受响应数据使用了 <code>exchange()</code> 方法，但又在一些流程分支中没有调用 <code>ClientResponse#releaseBody()</code> 方法，导致大量数据得不到释放，netty内存池占满，后续的请求在申请内存时报OOM异常。</p><p>得到经验教训：使用不熟悉的三方库时，一定要阅读方法注释、类注释。</p><hr><p>参考文档：</p><ol><li><a href="http://www.bewindoweb.com/291.html">Netty内存泄漏排查</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html">Web on Reactive Stack</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;公司项目存在一个服务，类似于爬虫，需要解析给定的URL，从返回的HTML中提取页面的标题、封面图、摘要、icon等信息。由于这是一个无DB访</summary>
      
    
    
    
    <category term="问题排查记录" scheme="https://limbo-world.github.io/categories/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="WebFlux" scheme="https://limbo-world.github.io/tags/WebFlux/"/>
    
  </entry>
  
  <entry>
    <title>hexo github 搭建博客</title>
    <link href="https://limbo-world.github.io/2022/01/19/hexo-github-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://limbo-world.github.io/2022/01/19/hexo-github-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-01-19T04:31:33.000Z</published>
    <updated>2022-02-18T07:14:16.820Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要分享，基于hexo和github搭建博客的过程，避免采坑。</p><h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><p>源码地址: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>详见：<a href="https://hexo.io/docs/commands">https://hexo.io/docs/commands</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token comment"># 初始化项目</span>hexo g <span class="token comment"># hexo generate 的缩写 构建静态文件</span>hexo s <span class="token comment"># hexo server 的缩写 启动服务</span>hexo <span class="token builtin class-name">help</span> <span class="token comment"># 查看帮助</span>hexo version <span class="token comment"># 查看版本</span>hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span> <span class="token comment"># 创建文章</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部分配置"><a href="#部分配置" class="headerlink" title="部分配置"></a>部分配置</h2><p><code>_config.yml</code>中部分配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span>                  <span class="token comment"># 博客名称</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span>               <span class="token comment"># 博客子标题</span><span class="token key atrule">description</span><span class="token punctuation">:</span>            <span class="token comment"># 作者描述</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span>               <span class="token comment"># 站点关键词，用于搜索优化</span><span class="token key atrule">author</span><span class="token punctuation">:</span>                 <span class="token comment"># 博主名</span><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN         <span class="token comment"># 站点语言</span><span class="token key atrule">timezone</span><span class="token punctuation">:</span> Asia/Shanghai <span class="token comment"># 时区</span><span class="token comment"># Directory</span><span class="token key atrule">public_dir</span><span class="token punctuation">:</span> ./ <span class="token comment"># 如果当前项目直接提交github，可以考虑改成这样，让index.html直接在根目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h2><p>正常来说，配置校验成功后输出如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO Validating configINFO <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>  ███╗   ██╗███████╗██╗  ██╗████████╗  ████╗  ██║██╔════╝╚██╗██╔╝╚══██╔══╝  ██╔██╗ ██║█████╗   ╚███╔╝    ██║  ██║╚██╗██║██╔══╝   ██╔██╗    ██║  ██║ ╚████║███████╗██╔╝ ██╗   ██║  ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝   ╚═╝<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>NexT version <span class="token number">8.9</span>.0Documentation: https://theme-next.js.org<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>INFO Start processingINFO Hexo is running at http://localhost:4000/ <span class="token builtin class-name">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="缓存清理"><a href="#缓存清理" class="headerlink" title="缓存清理"></a>缓存清理</h2><p>使用过程中，有时候发现文章回退了内容，但是生成的还是之前的内容。主要是因为<code>db.json</code>数据问题，删除此文件重新进行操作即可。</p><h1 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h1><p>本文主要使用的hexo主题为<code>hexo-theme-next</code></p><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>主题地址</p><ul><li>最新: <a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></li><li>老版: <a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a></li></ul><p>设置主题，修改<code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拷贝主题配置，由于我是新版，使用如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> node_modules/hexo-theme-next/_config.yml _config.next.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>老版的拷贝方式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> themes/next/_config.yml _config.next.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="切换Scheme"><a href="#切换Scheme" class="headerlink" title="切换Scheme"></a>切换Scheme</h2><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持以下 Scheme：</p><ul><li>  <strong>Muse</strong> - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>  <strong>Mist</strong> - Muse 的紧凑版本，整洁有序的单栏外观</li><li>  <strong>Pisces</strong> - 双栏 Scheme，小家碧玉似的清新</li><li>  <strong>Gemini</strong> - 左侧网站信息及目录，块+片段结构布局  </li></ul><p>修改<code>_config.next.yml</code>，我目前使用<code>Gemini</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">scheme</span><span class="token punctuation">:</span> Gemini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h2><p>修改<code>_config.next.yml</code>内容，<code>||</code>前面为对应路径，后面为设置的icon</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">home</span><span class="token punctuation">:</span> / <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>home  <span class="token key atrule">about</span><span class="token punctuation">:</span> /about/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>user  <span class="token key atrule">tags</span><span class="token punctuation">:</span> /tags/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>tags  <span class="token key atrule">categories</span><span class="token punctuation">:</span> /categories/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>th  <span class="token key atrule">archives</span><span class="token punctuation">:</span> /archives/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>archive  <span class="token comment"># schedule: /schedule/ || fa fa-calendar</span>  <span class="token comment"># sitemap: /sitemap.xml || fa fa-sitemap</span>  <span class="token comment"># commonweal: /404/ || fa fa-heartbeat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="搜索插件"><a href="#搜索插件" class="headerlink" title="搜索插件"></a>搜索插件</h1><p>插件源码地址：<a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a></p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 <code>_config.yml</code>中加入</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span> ./search.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>_config.next.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">local_search</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="seo插件"><a href="#seo插件" class="headerlink" title="seo插件"></a>seo插件</h1><p>插件源码地址：</p><ul><li>其它：<a href="https://github.com/hexojs/hexo-generator-sitemap">https://github.com/hexojs/hexo-generator-sitemap</a></li><li>百度：<a href="https://github.com/coneycode/hexo-generator-baidu-sitemap">https://github.com/coneycode/hexo-generator-baidu-sitemap</a></li></ul><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里主要分享，基于hexo和github搭建博客的过程，避免采坑。&lt;/p&gt;
&lt;h1 id=&quot;hexo&quot;&gt;&lt;a href=&quot;#hexo&quot; class=&quot;headerlink&quot; title=&quot;hexo&quot;&gt;&lt;/a&gt;hexo&lt;/h1&gt;&lt;p&gt;源码地址: &lt;a href=&quot;https:</summary>
      
    
    
    
    
  </entry>
  
</feed>
